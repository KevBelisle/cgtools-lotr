/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProductsRouteImport } from './routes/products/route'
import { Route as IndexImport } from './routes/index'
import { Route as RulebooksIndexImport } from './routes/rulebooks/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as ProductsRepackagedImport } from './routes/products/repackaged'
import { Route as ProductsPodImport } from './routes/products/pod'
import { Route as ProductsOriginalImport } from './routes/products/original'
import { Route as ProductsNightmareImport } from './routes/products/nightmare'
import { Route as ProductsProductCodeImport } from './routes/products/$product-code'
import { Route as GlossaryGlossaryTermImport } from './routes/glossary/$glossary-term'
import { Route as CardsCardSlugImport } from './routes/cards/$card-slug'
import { Route as GlossarySearchRouteImport } from './routes/glossary/search/route'
import { Route as CardsSearchRouteImport } from './routes/cards/search/route'
import { Route as GlossarySearchIndexImport } from './routes/glossary/search/index'
import { Route as CardsSearchIndexImport } from './routes/cards/search/index'
import { Route as CardsSearchAdvancedImport } from './routes/cards/search/advanced'

// Create/Update Routes

const ProductsRouteRoute = ProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RulebooksIndexRoute = RulebooksIndexImport.update({
  id: '/rulebooks/',
  path: '/rulebooks/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProductsRouteRoute,
} as any)

const ProductsRepackagedRoute = ProductsRepackagedImport.update({
  id: '/repackaged',
  path: '/repackaged',
  getParentRoute: () => ProductsRouteRoute,
} as any)

const ProductsPodRoute = ProductsPodImport.update({
  id: '/pod',
  path: '/pod',
  getParentRoute: () => ProductsRouteRoute,
} as any)

const ProductsOriginalRoute = ProductsOriginalImport.update({
  id: '/original',
  path: '/original',
  getParentRoute: () => ProductsRouteRoute,
} as any)

const ProductsNightmareRoute = ProductsNightmareImport.update({
  id: '/nightmare',
  path: '/nightmare',
  getParentRoute: () => ProductsRouteRoute,
} as any)

const ProductsProductCodeRoute = ProductsProductCodeImport.update({
  id: '/$product-code',
  path: '/$product-code',
  getParentRoute: () => ProductsRouteRoute,
} as any)

const GlossaryGlossaryTermRoute = GlossaryGlossaryTermImport.update({
  id: '/glossary/$glossary-term',
  path: '/glossary/$glossary-term',
  getParentRoute: () => rootRoute,
} as any)

const CardsCardSlugRoute = CardsCardSlugImport.update({
  id: '/cards/$card-slug',
  path: '/cards/$card-slug',
  getParentRoute: () => rootRoute,
} as any)

const GlossarySearchRouteRoute = GlossarySearchRouteImport.update({
  id: '/glossary/search',
  path: '/glossary/search',
  getParentRoute: () => rootRoute,
} as any)

const CardsSearchRouteRoute = CardsSearchRouteImport.update({
  id: '/cards/search',
  path: '/cards/search',
  getParentRoute: () => rootRoute,
} as any)

const GlossarySearchIndexRoute = GlossarySearchIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GlossarySearchRouteRoute,
} as any)

const CardsSearchIndexRoute = CardsSearchIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CardsSearchRouteRoute,
} as any)

const CardsSearchAdvancedRoute = CardsSearchAdvancedImport.update({
  id: '/advanced',
  path: '/advanced',
  getParentRoute: () => CardsSearchRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRoute
    }
    '/cards/search': {
      id: '/cards/search'
      path: '/cards/search'
      fullPath: '/cards/search'
      preLoaderRoute: typeof CardsSearchRouteImport
      parentRoute: typeof rootRoute
    }
    '/glossary/search': {
      id: '/glossary/search'
      path: '/glossary/search'
      fullPath: '/glossary/search'
      preLoaderRoute: typeof GlossarySearchRouteImport
      parentRoute: typeof rootRoute
    }
    '/cards/$card-slug': {
      id: '/cards/$card-slug'
      path: '/cards/$card-slug'
      fullPath: '/cards/$card-slug'
      preLoaderRoute: typeof CardsCardSlugImport
      parentRoute: typeof rootRoute
    }
    '/glossary/$glossary-term': {
      id: '/glossary/$glossary-term'
      path: '/glossary/$glossary-term'
      fullPath: '/glossary/$glossary-term'
      preLoaderRoute: typeof GlossaryGlossaryTermImport
      parentRoute: typeof rootRoute
    }
    '/products/$product-code': {
      id: '/products/$product-code'
      path: '/$product-code'
      fullPath: '/products/$product-code'
      preLoaderRoute: typeof ProductsProductCodeImport
      parentRoute: typeof ProductsRouteImport
    }
    '/products/nightmare': {
      id: '/products/nightmare'
      path: '/nightmare'
      fullPath: '/products/nightmare'
      preLoaderRoute: typeof ProductsNightmareImport
      parentRoute: typeof ProductsRouteImport
    }
    '/products/original': {
      id: '/products/original'
      path: '/original'
      fullPath: '/products/original'
      preLoaderRoute: typeof ProductsOriginalImport
      parentRoute: typeof ProductsRouteImport
    }
    '/products/pod': {
      id: '/products/pod'
      path: '/pod'
      fullPath: '/products/pod'
      preLoaderRoute: typeof ProductsPodImport
      parentRoute: typeof ProductsRouteImport
    }
    '/products/repackaged': {
      id: '/products/repackaged'
      path: '/repackaged'
      fullPath: '/products/repackaged'
      preLoaderRoute: typeof ProductsRepackagedImport
      parentRoute: typeof ProductsRouteImport
    }
    '/products/': {
      id: '/products/'
      path: '/'
      fullPath: '/products/'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof ProductsRouteImport
    }
    '/rulebooks/': {
      id: '/rulebooks/'
      path: '/rulebooks'
      fullPath: '/rulebooks'
      preLoaderRoute: typeof RulebooksIndexImport
      parentRoute: typeof rootRoute
    }
    '/cards/search/advanced': {
      id: '/cards/search/advanced'
      path: '/advanced'
      fullPath: '/cards/search/advanced'
      preLoaderRoute: typeof CardsSearchAdvancedImport
      parentRoute: typeof CardsSearchRouteImport
    }
    '/cards/search/': {
      id: '/cards/search/'
      path: '/'
      fullPath: '/cards/search/'
      preLoaderRoute: typeof CardsSearchIndexImport
      parentRoute: typeof CardsSearchRouteImport
    }
    '/glossary/search/': {
      id: '/glossary/search/'
      path: '/'
      fullPath: '/glossary/search/'
      preLoaderRoute: typeof GlossarySearchIndexImport
      parentRoute: typeof GlossarySearchRouteImport
    }
  }
}

// Create and export the route tree

interface ProductsRouteRouteChildren {
  ProductsProductCodeRoute: typeof ProductsProductCodeRoute
  ProductsNightmareRoute: typeof ProductsNightmareRoute
  ProductsOriginalRoute: typeof ProductsOriginalRoute
  ProductsPodRoute: typeof ProductsPodRoute
  ProductsRepackagedRoute: typeof ProductsRepackagedRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

const ProductsRouteRouteChildren: ProductsRouteRouteChildren = {
  ProductsProductCodeRoute: ProductsProductCodeRoute,
  ProductsNightmareRoute: ProductsNightmareRoute,
  ProductsOriginalRoute: ProductsOriginalRoute,
  ProductsPodRoute: ProductsPodRoute,
  ProductsRepackagedRoute: ProductsRepackagedRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}

const ProductsRouteRouteWithChildren = ProductsRouteRoute._addFileChildren(
  ProductsRouteRouteChildren,
)

interface CardsSearchRouteRouteChildren {
  CardsSearchAdvancedRoute: typeof CardsSearchAdvancedRoute
  CardsSearchIndexRoute: typeof CardsSearchIndexRoute
}

const CardsSearchRouteRouteChildren: CardsSearchRouteRouteChildren = {
  CardsSearchAdvancedRoute: CardsSearchAdvancedRoute,
  CardsSearchIndexRoute: CardsSearchIndexRoute,
}

const CardsSearchRouteRouteWithChildren =
  CardsSearchRouteRoute._addFileChildren(CardsSearchRouteRouteChildren)

interface GlossarySearchRouteRouteChildren {
  GlossarySearchIndexRoute: typeof GlossarySearchIndexRoute
}

const GlossarySearchRouteRouteChildren: GlossarySearchRouteRouteChildren = {
  GlossarySearchIndexRoute: GlossarySearchIndexRoute,
}

const GlossarySearchRouteRouteWithChildren =
  GlossarySearchRouteRoute._addFileChildren(GlossarySearchRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/products': typeof ProductsRouteRouteWithChildren
  '/cards/search': typeof CardsSearchRouteRouteWithChildren
  '/glossary/search': typeof GlossarySearchRouteRouteWithChildren
  '/cards/$card-slug': typeof CardsCardSlugRoute
  '/glossary/$glossary-term': typeof GlossaryGlossaryTermRoute
  '/products/$product-code': typeof ProductsProductCodeRoute
  '/products/nightmare': typeof ProductsNightmareRoute
  '/products/original': typeof ProductsOriginalRoute
  '/products/pod': typeof ProductsPodRoute
  '/products/repackaged': typeof ProductsRepackagedRoute
  '/products/': typeof ProductsIndexRoute
  '/rulebooks': typeof RulebooksIndexRoute
  '/cards/search/advanced': typeof CardsSearchAdvancedRoute
  '/cards/search/': typeof CardsSearchIndexRoute
  '/glossary/search/': typeof GlossarySearchIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cards/$card-slug': typeof CardsCardSlugRoute
  '/glossary/$glossary-term': typeof GlossaryGlossaryTermRoute
  '/products/$product-code': typeof ProductsProductCodeRoute
  '/products/nightmare': typeof ProductsNightmareRoute
  '/products/original': typeof ProductsOriginalRoute
  '/products/pod': typeof ProductsPodRoute
  '/products/repackaged': typeof ProductsRepackagedRoute
  '/products': typeof ProductsIndexRoute
  '/rulebooks': typeof RulebooksIndexRoute
  '/cards/search/advanced': typeof CardsSearchAdvancedRoute
  '/cards/search': typeof CardsSearchIndexRoute
  '/glossary/search': typeof GlossarySearchIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/products': typeof ProductsRouteRouteWithChildren
  '/cards/search': typeof CardsSearchRouteRouteWithChildren
  '/glossary/search': typeof GlossarySearchRouteRouteWithChildren
  '/cards/$card-slug': typeof CardsCardSlugRoute
  '/glossary/$glossary-term': typeof GlossaryGlossaryTermRoute
  '/products/$product-code': typeof ProductsProductCodeRoute
  '/products/nightmare': typeof ProductsNightmareRoute
  '/products/original': typeof ProductsOriginalRoute
  '/products/pod': typeof ProductsPodRoute
  '/products/repackaged': typeof ProductsRepackagedRoute
  '/products/': typeof ProductsIndexRoute
  '/rulebooks/': typeof RulebooksIndexRoute
  '/cards/search/advanced': typeof CardsSearchAdvancedRoute
  '/cards/search/': typeof CardsSearchIndexRoute
  '/glossary/search/': typeof GlossarySearchIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/products'
    | '/cards/search'
    | '/glossary/search'
    | '/cards/$card-slug'
    | '/glossary/$glossary-term'
    | '/products/$product-code'
    | '/products/nightmare'
    | '/products/original'
    | '/products/pod'
    | '/products/repackaged'
    | '/products/'
    | '/rulebooks'
    | '/cards/search/advanced'
    | '/cards/search/'
    | '/glossary/search/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/cards/$card-slug'
    | '/glossary/$glossary-term'
    | '/products/$product-code'
    | '/products/nightmare'
    | '/products/original'
    | '/products/pod'
    | '/products/repackaged'
    | '/products'
    | '/rulebooks'
    | '/cards/search/advanced'
    | '/cards/search'
    | '/glossary/search'
  id:
    | '__root__'
    | '/'
    | '/products'
    | '/cards/search'
    | '/glossary/search'
    | '/cards/$card-slug'
    | '/glossary/$glossary-term'
    | '/products/$product-code'
    | '/products/nightmare'
    | '/products/original'
    | '/products/pod'
    | '/products/repackaged'
    | '/products/'
    | '/rulebooks/'
    | '/cards/search/advanced'
    | '/cards/search/'
    | '/glossary/search/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProductsRouteRoute: typeof ProductsRouteRouteWithChildren
  CardsSearchRouteRoute: typeof CardsSearchRouteRouteWithChildren
  GlossarySearchRouteRoute: typeof GlossarySearchRouteRouteWithChildren
  CardsCardSlugRoute: typeof CardsCardSlugRoute
  GlossaryGlossaryTermRoute: typeof GlossaryGlossaryTermRoute
  RulebooksIndexRoute: typeof RulebooksIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProductsRouteRoute: ProductsRouteRouteWithChildren,
  CardsSearchRouteRoute: CardsSearchRouteRouteWithChildren,
  GlossarySearchRouteRoute: GlossarySearchRouteRouteWithChildren,
  CardsCardSlugRoute: CardsCardSlugRoute,
  GlossaryGlossaryTermRoute: GlossaryGlossaryTermRoute,
  RulebooksIndexRoute: RulebooksIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/products",
        "/cards/search",
        "/glossary/search",
        "/cards/$card-slug",
        "/glossary/$glossary-term",
        "/rulebooks/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/products": {
      "filePath": "products/route.tsx",
      "children": [
        "/products/$product-code",
        "/products/nightmare",
        "/products/original",
        "/products/pod",
        "/products/repackaged",
        "/products/"
      ]
    },
    "/cards/search": {
      "filePath": "cards/search/route.tsx",
      "children": [
        "/cards/search/advanced",
        "/cards/search/"
      ]
    },
    "/glossary/search": {
      "filePath": "glossary/search/route.tsx",
      "children": [
        "/glossary/search/"
      ]
    },
    "/cards/$card-slug": {
      "filePath": "cards/$card-slug.tsx"
    },
    "/glossary/$glossary-term": {
      "filePath": "glossary/$glossary-term.tsx"
    },
    "/products/$product-code": {
      "filePath": "products/$product-code.tsx",
      "parent": "/products"
    },
    "/products/nightmare": {
      "filePath": "products/nightmare.tsx",
      "parent": "/products"
    },
    "/products/original": {
      "filePath": "products/original.tsx",
      "parent": "/products"
    },
    "/products/pod": {
      "filePath": "products/pod.tsx",
      "parent": "/products"
    },
    "/products/repackaged": {
      "filePath": "products/repackaged.tsx",
      "parent": "/products"
    },
    "/products/": {
      "filePath": "products/index.tsx",
      "parent": "/products"
    },
    "/rulebooks/": {
      "filePath": "rulebooks/index.tsx"
    },
    "/cards/search/advanced": {
      "filePath": "cards/search/advanced.tsx",
      "parent": "/cards/search"
    },
    "/cards/search/": {
      "filePath": "cards/search/index.tsx",
      "parent": "/cards/search"
    },
    "/glossary/search/": {
      "filePath": "glossary/search/index.tsx",
      "parent": "/glossary/search"
    }
  }
}
ROUTE_MANIFEST_END */

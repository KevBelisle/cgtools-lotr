/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SqleanImport } from './routes/sqlean'
import { Route as DebugImport } from './routes/debug'
import { Route as IndexImport } from './routes/index'
import { Route as CardsSearchImport } from './routes/cards/search'

// Create/Update Routes

const SqleanRoute = SqleanImport.update({
  id: '/sqlean',
  path: '/sqlean',
  getParentRoute: () => rootRoute,
} as any)

const DebugRoute = DebugImport.update({
  id: '/debug',
  path: '/debug',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CardsSearchRoute = CardsSearchImport.update({
  id: '/cards/search',
  path: '/cards/search',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/debug': {
      id: '/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof DebugImport
      parentRoute: typeof rootRoute
    }
    '/sqlean': {
      id: '/sqlean'
      path: '/sqlean'
      fullPath: '/sqlean'
      preLoaderRoute: typeof SqleanImport
      parentRoute: typeof rootRoute
    }
    '/cards/search': {
      id: '/cards/search'
      path: '/cards/search'
      fullPath: '/cards/search'
      preLoaderRoute: typeof CardsSearchImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/debug': typeof DebugRoute
  '/sqlean': typeof SqleanRoute
  '/cards/search': typeof CardsSearchRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/debug': typeof DebugRoute
  '/sqlean': typeof SqleanRoute
  '/cards/search': typeof CardsSearchRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/debug': typeof DebugRoute
  '/sqlean': typeof SqleanRoute
  '/cards/search': typeof CardsSearchRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/debug' | '/sqlean' | '/cards/search'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/debug' | '/sqlean' | '/cards/search'
  id: '__root__' | '/' | '/debug' | '/sqlean' | '/cards/search'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DebugRoute: typeof DebugRoute
  SqleanRoute: typeof SqleanRoute
  CardsSearchRoute: typeof CardsSearchRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DebugRoute: DebugRoute,
  SqleanRoute: SqleanRoute,
  CardsSearchRoute: CardsSearchRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/debug",
        "/sqlean",
        "/cards/search"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/debug": {
      "filePath": "debug.tsx"
    },
    "/sqlean": {
      "filePath": "sqlean.tsx"
    },
    "/cards/search": {
      "filePath": "cards/search.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
